/** Callback to inform of a value updates. */
export declare type Subscriber<T> = (value: T) => void;
/** Unsubscribes from value updates. */
export declare type Unsubscriber = () => void;
/** Callback to update a value. */
export declare type Updater<T> = (value: T) => T;
/** Readable interface for subscribing. */
export interface Readable<T> {
    /**
     * Subscribe on value changes.
     * @param run subscription callback
     * @param invalidate cleanup callback
     */
    subscribe(run: Subscriber<T>): Unsubscriber;
}
/** Writable interface for both updating and subscribing. */
export interface Writable<T> extends Readable<T> {
    /**
     * Set value and inform subscribers.
     * @param value to set
     */
    set(value: T): void;
    /**
     * Update value using callback and inform subscribers.
     * @param updater callback
     */
    update(updater: Updater<T>): void;
}
export declare type ColorMode = string;
export interface PerfectDarkModeOptions {
    prefix?: string;
    modes?: string[];
}
export declare type EnhancedUpdater = (value: ColorMode | undefined, modes: ColorMode[], modeIndex: number) => ColorMode;
export interface ColorModeWritableWithEnhancedUpdater extends Writable<ColorMode | undefined> {
    update: (updater: EnhancedUpdater) => void;
}
export interface PerfectDarkMode {
    /**
     * The resolved color mode, can be set or updated.
     */
    mode: ColorModeWritableWithEnhancedUpdater;
    /**
     * The saved color mode, probably only useful for debugging.
     */
    modeSaved: Writable<ColorMode | undefined>;
    /**
     * The system color mode, probably only useful for debugging.
     */
    modeOS: Readable<ColorMode>;
    /**
     * A list of color modes.
     */
    modes: Writable<ColorMode[]>;
}
export declare const createPerfectDarkMode: ({ prefix, modes, }?: PerfectDarkModeOptions) => PerfectDarkMode;
